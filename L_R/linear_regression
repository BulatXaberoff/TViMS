import matplotlib
import numpy as np
import matplotlib.pyplot as plt
from sympy import *
from matplotlib.ticker import MultipleLocator
import matplotlib.patches as pt


def f(a, b, x):
    return a * x + b


def regression_func(x, y):
    power_x_i = np.array([np.power(el, 2) for el in x])
    power_y_i = np.array([np.power(el, 2) for el in y])

    x_i_y_i = x * y

    b = len(x)
    A = np.array([[np.sum(power_x_i), np.sum(x)], [np.sum(x), b]])
    B = np.array([np.sum(x_i_y_i), np.sum(y)])

    result = np.linalg.solve(A, B)
    x_p = np.arange(-100, x.max()+100, 10)

    y_p = np.array([f(result[0], result[1], xi) for xi in x_p])

    show_plot(x, x_p, y, y_p, result[0], result[1])

    mean_xy = np.mean(x_i_y_i)
    mean_x = np.mean(x)
    mean_y = np.mean(y)

    mean_p_x = np.mean(power_x_i)
    mean_p_y = np.mean(power_y_i)

    disp_x = np.sqrt(mean_p_x - np.power(mean_x, 2))
    disp_y = np.sqrt(mean_p_y - np.power(mean_y, 2))

    coef_correleation = (mean_xy - mean_x * mean_y) / (disp_x * disp_y)
    coef_determination = np.power(coef_correleation, 2)
    print(f"coef_correleation - {coef_correleation}\n"
          f"coef_determination - {coef_determination}")


def show_plot(x, x_p, y, y_p, a, b):
    ax_x=[0]*1000
    ax_y=np.arange(-500,500,1)
    fig = plt.figure(figsize=(8, 5))
    fig.suptitle('Linear Regression')
    ax = fig.add_subplot()
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    plt.plot(ax_x,ax_y,color='k')
    plt.plot(ax_y, ax_x,color='k')


    plt.plot(x, y, ls="", marker="o", label="points")
    plt.plot(x_p, y_p, label=f'y={int(a * 100) / 100}*x+{int(b * 100) / 100}')
    plt.minorticks_on()
    plt.grid(which='major')
    plt.grid(which='minor')
    plt.legend()

    plt.show()

# plt.rcParams['text.usetex'] = True

# x = np.array([12, 9, 8, 14, 15, 11, 10, 15])
# y = np.array([42, 107, 100, 60, 78, 79, 90, 54])

# x=np.array([0,-1,-3,-5,1,3,4])
# y=np.array([2,0,-2,-4,9,5,7])
# regression_func(x, y)


